{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0.0
description:         "{{name}}"

dependencies:
- base >= 4.7 && < 5
- text
- containers
- nonempty-containers
- async
- stm
- uuid
- aeson
- aeson-pretty
- safe
- either
- witherable
- envparse
- neat-interpolation
- wai
- warp
- servant
- servant-server

default-extensions:
- OverloadedStrings

ghc-options:
  - -Wall
  - -Wincomplete-record-updates
  - -Wincomplete-uni-patterns
  - -Wredundant-constraints
  - -Wunused-packages
  - -O2

library:
  source-dirs: src

executables:
  {{name}}:
    main:                Main.hs
    source-dirs:         app
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}

tests:
  {{name}}-test:
    main:                Spec.hs
    source-dirs:         test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    - -O0 # No optimization for faster test runs
    dependencies:
    - {{name}}
    - hspec
    - QuickCheck
    - hspec-wai
    - hspec-wai-json
    build-tools:
    - hspec-discover

verbatim:
  cabal-version: 3.0
{-# START_FILE test/Spec.hs #-}
{-# OPTIONS_GHC -F -pgmF hspec-discover #-}

{-# START_FILE test/ServerSpec.hs #-}
{-# LANGUAGE QuasiQuotes #-}
module ServerSpec where

import Server (app)
import Test.Hspec (Spec, describe, it, shouldBe)
import Test.Hspec.QuickCheck (prop)
import Test.Hspec.Wai (ResponseMatcher (matchStatus), get, shouldRespondWith, with)
import Test.Hspec.Wai.JSON (json)
import Test.QuickCheck.Property ()

spec :: Spec
spec = describe "Simple test" $ do
  it "example-based unit test" $
    1 `shouldBe` 1

  prop "property-based unit test" $
    \l -> reverse (reverse l) == (l :: [Int])

  with (return app) $ do
    describe "GET /health/live/" $ do
      it "responds with ok status" $ do
        let response = [json|{"status":"ok"}|]
        get "/health/live/" `shouldRespondWith` response{matchStatus = 200}

    describe "GET /health/startup/" $ do
      it "responds with ok status" $ do
        let response = [json|{"status":"ok"}|]
        get "/health/startup/" `shouldRespondWith` response{matchStatus = 200}

    describe "GET /health/ready/" $ do
      it "responds with ok status" $ do
        let response = [json|{"status":"ok"}|]
        get "/health/ready/" `shouldRespondWith` response{matchStatus = 200}
{-# START_FILE src/Server.hs #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE TypeOperators #-}

module Server where

import Data.Aeson (ToJSON)
import Data.Data (Proxy (Proxy))
import GHC.Generics (Generic)
import Network.Wai (Application)
import Network.Wai.Handler.Warp (run)
import Servant (Get, Server, (:<|>) (..), (:>))
import Servant.API (JSON)
import Servant.Server (serve)

newtype StatusResponse = StatusResponse
  { status :: String
  }
  deriving (Generic, Eq, Show, Ord)

instance ToJSON StatusResponse

type HealthcheckEndpoints =
  "health" :> "live" :> Get '[JSON] StatusResponse
    :<|> "health" :> "startup" :> Get '[JSON] StatusResponse
    :<|> "health" :> "ready" :> Get '[JSON] StatusResponse

type API = HealthcheckEndpoints

api :: Proxy API
api = Proxy

app :: Application
app = serve api server

runApp :: IO () 
runApp = runServer

runServer :: IO ()
runServer = run 8080 app

server :: Server API
server = pure ok :<|> pure ok :<|> pure ok
 where
  ok = StatusResponse "ok"

{-# START_FILE app/Main.hs #-}
module Main where

import Server (runApp)

main :: IO ()
main = runApp
{-# START_FILE README.md #-}
# {{name}}

## How to build and run locally

The project uses the [Haskell tool stack](https://docs.haskellstack.org/en/stable/README/). The recommended way to install stack is by using [ghcup](https://www.haskell.org/ghcup/).
It's also possible to use [the nix package manager](https://nixos.org/), but this project does not provide a nix configuration file.

Assuming `stack` is installed in the system, to **build** the project use
```
stack build
```
To **build and run the tests**, run
```
stack test
```
or equivalently
```
stack build --test
```
For **faster feedback loop** during development, it's possible to run tests continuously on every file change:
```
stack test --fast --file-watch
```
To run tests with **test coverage** instrumentation,
```
stack test --coverage
```
which generates a textual and HTML report.

Note: Tests are run in the CI and test coverage reports are automatically uploaded to codecov.

To **run** the executable via slack,
```
stack exec {{name}}
```
or passing arguments
```
stack exec {{name}} -- -v doctor
```

To **install** the executable under `~/.local/bin`,
```
stack install
```
and the executable can be run with `{{name}}` assuming `~/.local/bin` is in the `$PATH` variable.

To run a version of **ghci** compatible with the resolver
```
stack ghci
```
For more information about how to use `stack`, refer to the [official docs](https://docs.haskellstack.org/en/stable/).

{-# START_FILE .github/workflows/ci.yml #-}
{{=<% %>=}}
name: Compile and run tests

on:
  push:
    branches: [ main, feature/** ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # enable manual execution

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  stack:

    name: ${{ matrix.os }} / ghc ${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        stack: ["3.1.1"]
        ghc: ["9.6.6"]

    steps:

    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Cache stack installation
      uses: actions/cache@v4
      with:
        path: |
          ~/.stack/build-plan
          ~/.stack/indices
          ~/.stack/snapshots
          ~/.stack/global-project/.stack-work/install
        key: ${{ runner.os }}-ghc-${{ matrix.ghc }}-stack-${{ matrix.stack }}-${{ hashFiles('stack.yaml', 'stack.yaml.lock') }}
        restore-keys: |
          ${{ runner.os }}-ghc-${{ matrix.ghc }}-stack-${{ matrix.stack }}-

    - name: Cache GHC installation
      uses: actions/cache@v4
      with:
        path: |
          ~/.ghcup/ghc/${{ matrix.ghc }}
          ~/.ghcup/bin/stack-${{ matrix.stack }}
        key: ${{ runner.os }}-ghc-${{ matrix.ghc }}-stack-${{ matrix.stack }}

    - name: Setup Haskell Stack
      uses: haskell-actions/setup@v2
      with:
        ghc-version: ${{ matrix.ghc }}
        stack-version: ${{ matrix.stack }}
        enable-stack: true

    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true' && success()
      timeout-minutes: 15
      run: |
        stack build --system-ghc --test --no-run-tests --only-dependencies

    - name: Run tests with coverage
      timeout-minutes: 15
      run: |
        stack test --system-ghc --test --coverage --fast

    - name: Build
      timeout-minutes: 15
      run: |
        stack build --system-ghc --test --no-run-tests

    - name: Generate coverage report
      uses: 8c6794b6/hpc-codecov-action@v3
      with:
        target: stack:<%name%>-test
        out: ./codecov.json
        verbose: true

    - name: Send coverage report
      uses: codecov/codecov-action@v4
      with:
        files: ./codecov.json
        fail_ci_if_error: false # optional (default = false)
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
<%={{ }}=%>
{-# START_FILE .gitignore #-}
# Stack
.stack-work/
.stack/
*~
*.swp
*.swo
.DS_Store
# IDE
.idea/
# Aux files
*.o
*.hi
*.hie
*.chi
*.chs.h
*.dyn_o
*.dyn_hi
*.prof
*.aux
*.hp
*.eventlog
{{name}}.cabal
hls.log
cabal.project.local
cabal.project.local~
.ghc.environment.*
